package com.rz.iot.bpo.mina.service.impl;

import com.rz.iot.bpo.common.constant.ResultConstants;
import com.rz.iot.bpo.common.utils.SecurityUtils;
import com.rz.iot.bpo.framework.web.entity.Result;
import com.rz.iot.bpo.mina.mapper.*;
import com.rz.iot.bpo.mina.model.*;
import com.rz.iot.bpo.mina.model.param.MinaClassesGenerateParam;
import com.rz.iot.bpo.mina.model.param.MinaClassesParam;
import com.rz.iot.bpo.mina.model.param.MinaScheduleRuleParam;
import com.rz.iot.bpo.mina.model.param.MinaUpdateClassesParam;
import com.rz.iot.bpo.mina.model.show.MinaClassGenerateShow;
import com.rz.iot.bpo.mina.model.show.MinaClassesShow;
import com.rz.iot.bpo.mina.service.MinaScheduleService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static com.rz.iot.bpo.common.constant.DictDataConstants.*;

@Slf4j
@Service("minaScheduleService")
public class MinaScheduleServiceImpl implements MinaScheduleService {

    @Resource
    MinaScheduleRuleMapper scheduleRuleMapper;

    @Resource
    MinaClassesFromExternalMapper classesFromExternalMapper;

    @Resource
    MinaClassesGenerateMapper classesGenerateMapper;

    @Resource
    MinaScheduleToEmployeeMapper scheduleToEmployeeMapper;

    @Resource
    MinaBatchMapper minaBatchMapper;

    @Resource
    MinaProjectMapper minaProjectMapper;


    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result addClassFromExternal(MinaClassesParam minaClassesParam) {
        Integer scheduleRuleId = minaClassesParam.getScheduleRuleId();
        //添加批次信息 //FIXME @ljq 不清楚功用为何
        MinaBatch minaBatch = new MinaBatch();
        minaBatch.setStatus(NORMAL_STATUS);
        minaBatch.setScheduleRuleId(scheduleRuleId);
        minaBatchMapper.insertSelective(minaBatch);
        //添加班次信息
        List<MinaClassesFromExternal> minaClassesList = minaClassesParam.getMinaClassesList();
        Integer id = minaBatch.getId();
        for (MinaClassesFromExternal minaClasses : minaClassesList) {
            minaClasses.setBatchId(id);
            minaClasses.setStatus(NORMAL_STATUS);
            classesFromExternalMapper.insert(minaClasses);
        }
        return Result.success();
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result getClassFromExternal(MinaClassesParam minaClassesParam) {
        Integer id = minaClassesParam.getClassId();
        MinaClassesShow minaClassesShow = classesFromExternalMapper.selectByPrimaryKey(id);
        Result result = new Result(ResultConstants.REQUEST_SUCCESS);
        result.setData(minaClassesShow);
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result getClassFromExternalList(MinaClassesParam minaClassesParam) {
        String transferStationName = minaClassesParam.getTransferStationName();
        Integer projectId = minaClassesParam.getProjectId();
        List<MinaClassesShow> classList = null;
        if (StringUtils.isEmpty(transferStationName)) {
            classList = classesFromExternalMapper.findAll();
        } else {
           List<Integer> projectIds = classesFromExternalMapper.selectProjectIdByTransferStationName(transferStationName);
           if(projectIds.size()==0){
               return new Result(ResultConstants.REQUEST_SUCCESS);
           }else{
               classList = classesFromExternalMapper.selectByProjectIds(projectIds);
           }
        }
        Result result = new Result(ResultConstants.REQUEST_SUCCESS);
        result.setData(classList);
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result updateClassFromExternal(MinaUpdateClassesParam bpoClassesParam) {
        classesFromExternalMapper.updateByPrimaryKey(bpoClassesParam);
        return Result.success();
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result addScheduleRule(MinaScheduleRuleParam scheduleRuleParam) {
        scheduleRuleMapper.insertSelective(scheduleRuleParam);
        MinaScheduleRule scheduleRule = new MinaScheduleRule();
        scheduleRule.setId(scheduleRuleParam.getId());
        return Result.success(scheduleRule);
    }

    @Override
    public Result<MinaClassGenerateShow> getClassGenerate(MinaClassesGenerateParam minaClassesGenerateParam) {
        String transferStationName = minaClassesGenerateParam.getTransferStationName();
        Integer projectId = minaClassesGenerateParam.getProjectId();
        List<MinaClassGenerateShow> classGenerateList = null;
        if (StringUtils.isEmpty(transferStationName)) {
            classGenerateList = classesGenerateMapper.findAll();
        } else {
            List<Integer> projectIds = classesFromExternalMapper.selectProjectIdByTransferStationName(transferStationName);
            if(projectIds.size()==0){
                return new Result(ResultConstants.REQUEST_SUCCESS);
            }else{
                classGenerateList = classesGenerateMapper.selectByProjectIds(projectIds);
            }
        }
        Result result = new Result<>(ResultConstants.REQUEST_SUCCESS);
        result.setData(classGenerateList);
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result addClassGenerate(MinaClassesGenerateParam classesGenerateParam) {
        classesGenerateMapper.insert(classesGenerateParam);
        return Result.success();
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result addClassGenerateList(MinaClassesParam classesParam) {

        List<MinaClassesGenerate> classesGenerates = new ArrayList<>();
        for (MinaClassesFromExternal classesFromExternal: classesParam.getMinaClassesList() ) {

            MinaClassesGenerate minaClassesGenerate = new MinaClassesGenerate();
            minaClassesGenerate.setClassName(classesFromExternal.getClassName());
            minaClassesGenerate.setClassSn(classesFromExternal.getClassSn());
            minaClassesGenerate.setBatchId(classesFromExternal.getBatchId());
            minaClassesGenerate.setClassType(classesFromExternal.getClassType());
            minaClassesGenerate.setStartDate(classesFromExternal.getStartDate());
            minaClassesGenerate.setEndDate(classesFromExternal.getEndDate());
            minaClassesGenerate.setStartTime(classesFromExternal.getStartTime());
            minaClassesGenerate.setEndTime(classesFromExternal.getEndTime());
            minaClassesGenerate.setArriveTime(classesFromExternal.getArriveTime());
            minaClassesGenerate.setContents(classesFromExternal.getContents());
            minaClassesGenerate.setPeopleNumber(classesFromExternal.getPeopleNumber());
            minaClassesGenerate.setProjectId(classesFromExternal.getProjectId());
            minaClassesGenerate.setExcludeHour(classesFromExternal.getExcludeHour());
            minaClassesGenerate.setSource(classesFromExternal.getSource());
            minaClassesGenerate.setStatus(classesFromExternal.getStatus());
            minaClassesGenerate.setScheduleStatus(classesFromExternal.getScheduleStatus());

            classesGenerates.add(minaClassesGenerate);
        }
        classesGenerateMapper.insertBatch(classesGenerates);
        return Result.success();
    }


    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result updateClassGenerate(MinaClassesGenerateParam minaClassesGenerateParam) {
        minaClassesGenerateParam.setUpdateUserId(SecurityUtils.getLoginUser().getUser().getUserId());
        classesGenerateMapper.updateByPrimaryKey(minaClassesGenerateParam);
        return Result.success();
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result deleteClassFromExternal(MinaClassesParam minaClassesParam) {
        MinaClassesFromExternal minaClassesFromExternal = new MinaClassesFromExternal();
        minaClassesFromExternal.setStatus(DELETE_STATUS);
        minaClassesFromExternal.setId(minaClassesParam.getClassId());
        classesFromExternalMapper.updateByPrimaryKey(minaClassesFromExternal);
        return Result.success();
    }


    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result getProjectNamesByTransferStationName(MinaClassesParam minaClassesParam) {
        String transferStationName =   minaClassesParam.getTransferStationName();
        List<String> projectNames = classesFromExternalMapper.selectProjectNameByTransferStationName(transferStationName);
        Result result = new Result<>(ResultConstants.REQUEST_SUCCESS);
        result.setData(projectNames);
        return result;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result deleteClassGenerate(Integer scheduleId) {
        if (scheduleId == null || scheduleId < 0) {
            return Result.requestParamError("scheduleId is invalid");
        }
        MinaClassesGenerate classesGenerate = new MinaClassesGenerate();
        classesGenerate.setStatus(DELETE_STATUS);
        classesGenerate.setId(scheduleId);
        classesGenerateMapper.updateByPrimaryKey(classesGenerate);
        scheduleToEmployeeMapper.deleteStatusByScheduleId(scheduleId);
        return Result.success();
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
    public Result deleteScheduleRule(Integer scheduleRuleId) {
        if (scheduleRuleId == null || scheduleRuleId < 0) {
            return Result.requestParamError("scheduleRuleId is invalid");
        }
        MinaScheduleRule minaScheduleRule = new MinaScheduleRule();
        minaScheduleRule.setStatus(DELETE_STATUS);
        minaScheduleRule.setId(scheduleRuleId);
        scheduleRuleMapper.updateByPrimaryKeySelective(minaScheduleRule);
        return Result.success();
    }

    private Result handelClassGenerateParam(MinaClassesGenerate classesGenerate) {

        classesGenerate.setId(null);
        String classSn = classesGenerate.getClassSn();
        if (StringUtils.isEmpty(classSn)) {
            return Result.requestParamError("classSn is null");
        }
        String className = classesGenerate.getClassName();
        if (StringUtils.isEmpty(className)) {
            return Result.requestParamError("className is null");
        }
        Date startDate = classesGenerate.getStartDate();
        if (startDate == null) {
            return Result.requestParamError("startDate is null");
        }
        Date endDate = classesGenerate.getEndDate();
        if (endDate == null) {
            return Result.requestParamError("endDate is null");
        }
        Date startTime = classesGenerate.getStartTime();
        if (startTime == null) {
            return Result.requestParamError("startTime is null");
        }
        Date endTime = classesGenerate.getEndTime();
        if (endTime == null) {
            return Result.requestParamError("endTime is null");
        }
        Date arriveTime = classesGenerate.getArriveTime();
        if (arriveTime == null) {
            return Result.requestParamError("arriveTime is null");
        }
        Integer peopleNumber = classesGenerate.getPeopleNumber();
        if (peopleNumber == null) {
            return Result.requestParamError("peopleNumber is null");
        }
        Integer projectId = classesGenerate.getProjectId();
        if (projectId == null) {
            return Result.requestParamError("projectId is null");
        }
        Integer source = classesGenerate.getSource();
        if (source == null) {
            return Result.requestParamError("source is null");
        }
        Integer isSpecial = classesGenerate.getIsSpecial();
        if (isSpecial == null) {
            return Result.requestParamError("isSpecial is null");
        }
        String specialAllowance = classesGenerate.getSpecialAllowance();
        if (StringUtils.isEmpty(specialAllowance)) {
            return Result.requestParamError("specialAllowance is null");
        }
        String mealAllowance = classesGenerate.getMealAllowance();
        if (StringUtils.isEmpty(mealAllowance)) {
            return Result.requestParamError("mealAllowance is null");
        }
        String nightAllowance = classesGenerate.getNightAllowance();
        if (StringUtils.isEmpty(nightAllowance)) {
            return Result.requestParamError("nightAllowance is null");
        }
        Integer isAllowance = classesGenerate.getIsAllowance();
        if (isAllowance == null) {
            return Result.requestParamError("isAllowance is null");
        }

        return null;
    }


    private Result handelScheduleRuleParam(MinaScheduleRule scheduleRuleParam) {
        scheduleRuleParam.setId(null);
        Integer maxWorkHour = scheduleRuleParam.getMaxWorkHour();
        if (maxWorkHour == null) {
            return Result.requestParamError("maxWorkHour is null");
        }
        Integer minWorkHour = scheduleRuleParam.getMinWorkHour();
        if (minWorkHour == null) {
            return Result.requestParamError("minWorkHour is null");
        }
        Integer scheduleNumber = scheduleRuleParam.getScheduleNumber();
        if (scheduleNumber == null) {
            return Result.requestParamError("scheduleNumber is null");
        }
        Integer priorityWorkers = scheduleRuleParam.getPriorityWorkers();
        if (priorityWorkers == null) {
            return Result.requestParamError("priorityWorkers is null");
        }
        String deviationRate = scheduleRuleParam.getDeviationRate();
        if (StringUtils.isEmpty(deviationRate)) {
            return Result.requestParamError("deviationRate is null");
        }
        return null;
    }


}
