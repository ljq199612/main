<template>
  <CfPanel title="数据字典类型管理" class="main">
    <el-form class="searchForm">
      <el-row>
        <el-col :span="6">
          <el-form-item label-width="72px" label="类型名称：">
            <el-input v-model.trim="queryForm.dictName" placeholder="请输入类型名称" class="half" @keyup.13.native="submit" />
          </el-form-item>
        </el-col>
        <el-col :span="6">
          <el-form-item label-width="90px" label="类型编码：">
            <el-input v-model.trim="queryForm.dictType" placeholder="请输入类型编码" class="half" @keyup.13.native="submit" />
          </el-form-item>
        </el-col>
        <el-col :span="6">
          <el-form-item label-width="72px" label="状态：">
            <el-select v-model="queryForm.status" placeholder="请选择状态" @change="submit">
              <el-option v-for="(item,index) in statusOptions" :key="index" :label="item.label" :value="item.val" />
            </el-select>
          </el-form-item>
        </el-col>
        <el-col :span="4" style="margin-left: 10px;">
          <el-form-item>
            <el-button class="bpoBtn" @click="submit">搜索</el-button>
            <el-button @click="reset">重置</el-button>
          </el-form-item>
        </el-col>
      </el-row>
    </el-form>

    <el-button type="primary" icon="el-icon-plus" @click="addFn">
      新增
    </el-button>
    <el-table
      v-loading="listLoading"
      :data="tableList"
      class="bpoTable"
      fit
      @sort-change="sortChange"
    >
      <el-table-column align="center" label="编号" type="index" width="80" />
      <el-table-column align="left" label="类型名称" min-width="80" prop="dictName" />
      <el-table-column align="left" label="类型编码" min-width="80" prop="dictType" />
      <el-table-column align="center" label="创建时间" min-width="80">
        <template slot-scope="scope">{{ scope.row.createTime }}</template>
      </el-table-column>
      <el-table-column align="left" label="备注" min-width="80">
        <template slot-scope="scope">{{ scope.row.remark }}</template>
      </el-table-column>
      <el-table-column align="center" label="状态" width="80">
        <template slot-scope="scope">
          <el-switch
            v-model="scope.row.statusValue"
            :active-value="1"
            :inactive-value="2"
            @change="changeStatus(scope.row)"
          />
        </template>
      </el-table-column>
      <el-table-column align="center" label="操作" width="200">
        <template slot-scope="scope">
          <el-button type="text" style="color:#19D185" @click="updateAddForm(scope.row)">修改</el-button>
          <el-button type="text" style="color:#4794F7" @click="toDataMgt(scope.row)">数据管理</el-button>
          <el-button v-if="scope.row.status!='deleted'" style="color:#F52222" type="text" @click="delAddForm(scope.row,'deleted')">
            删除
          </el-button>
        </template>
      </el-table-column>
    </el-table>
    <!-- 新增弹框 -->
    <el-dialog
      :title="`${currentRow?'修改':'增加'}数据字典类型`"
      class="bpoDialog"
      :close-on-click-modal="false"
      :visible.sync="dialogFormVisible"
      @close="cancelAddForm"
    >
      <el-form
        ref="addForm"
        :model="addForm"
        label-width="90px"
        :rules="addFormRules"
      >
        <el-form-item label="类型名称：" prop="dictName">
          <el-input v-model="addForm.dictName" placeholder="请输入类型名称" autocomplete="off" />
        </el-form-item>
        <el-form-item label="类型编码：" prop="dictType">
          <el-input v-model="addForm.dictType" placeholder="请输入类型编码" autocomplete="off" />
        </el-form-item>
        <el-form-item label="启用：" prop="status">
          <el-radio-group v-model="addForm.status">
            <el-radio :label="1">启用</el-radio>
            <el-radio :label="2">禁用</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="备注：">
          <el-input v-model="addForm.remark" placeholder="请输入备注" type="textarea" :rows="3" autocomplete="off" />
        </el-form-item>
      </el-form>
      <el-row :gutter="20">
        <el-col :span="24" class="bpoButtonGroup pull-right">
          <el-button type="primary" @click="confirmAddForm">提交</el-button>
          <el-button @click="cancelAddForm">取消</el-button>
        </el-col>
      </el-row>
    </el-dialog>
    <pagination v-show="total>0" :total="total" lang-type="zh" :page.sync="page.pageNum" :limit.sync="page.pageSize" @pagination="getList" />
  </CfPanel>
</template>
<script>
import { findAllDt, deleteDt, insertDt, updateDt } from '@/api/dataDictionary'
import CfPanel from '@/components/Panel'
import Pagination from '@/components/Pagination'

export default {
  name: 'DataDictionaryTypeMgt',
  components: {
    CfPanel,
    Pagination
  },
  data() {
    return {
      listLoading: false,
      statusOptions: [
        {
          val: 0,
          label: '全部'
        },
        {
          val: 1,
          label: '启用'
        },
        {
          val: 2,
          label: '禁用'
        }
      ],
      page: {
        pageNum: 1,
        pageSize: 10,
        importance: undefined,
        title: undefined,
        type: undefined,
        sortField: '',
        sortType: ''
      },
      total: 0,
      queryForm: {
        dictName: '',
        dictType: '',
        status: null
      },
      tableList: [],
      dialogFormVisible: false,
      addForm: {
        dictName: '',
        dictType: '',
        status: 1,
        remark: ''
      },
      addFormRules: {
        dictName: { required: true, message: '请输入类型名称', trigger: 'blur' },
        dictType: { required: true, message: '请输类型编码', trigger: 'blur' },
        status: { required: true, message: '请选择是否启用', trigger: 'blur' }
      },
      currentRow: null // 修改表格当前行数据
    }
  },
  created() {
    this.getList()
  },
  methods: {
    addFn() {
      this.dialogFormVisible = true
    },
    cancelAddForm() {
      this.clearAddForm()
    },
    confirmAddForm() {
      this.$refs.addForm.validate((valid) => {
        if (valid) {
          // 修改数据
          if (this.currentRow) {
            this.updateDt()
          // 新增数据
          } else {
            this.insertDt()
          }
        }
      })
    },
    // 重置新增表单
    clearAddForm() {
      this.dialogFormVisible = false
      this.addForm.dictName = ''
      this.addForm.dictType = ''
      this.addForm.status = 1
      this.addForm.remark = ''
      this.$refs.addForm.clearValidate()
    },
    insertDt() {
      insertDt({
        ...this.addForm
      }).then((res) => {
        // 刷新列表
        this.reset()
        this.$message({
          type: 'success',
          message: res.message || '字典类型新增成功'
        })
      }).catch((err) => {
        this.$message({
          type: 'error',
          message: err.message || '新增错误'
        })
      })
      // 重置表单
      this.clearAddForm()
    },
    updateDt() {
      updateDt({
        dictId: this.currentRow.dictId,
        ...this.addForm
      }).then((res) => {
        if (res.code === 40030) {
          this.$message({
            type: 'warning',
            message: res.message || '该类型编码已存在'
          })
        } else {
          // 刷新列表
          this.getList()
          this.currentRow = null
          this.$message({
            type: 'success',
            message: res.message || '字典类型更新成功'
          })
          // 重置表单
          this.clearAddForm()
        }
      }).catch((err) => {
        // 重置表单
        this.clearAddForm()
        this.currentRow = null
        this.$message({
          type: 'error',
          message: err.message || '更新错误'
        })
      })
    },
    reset() {
      this.page.pageNum = 1
      this.queryForm.dictName = ''
      this.queryForm.dictType = ''
      this.queryForm.status = null
      this.getList()
    },
    submit() {
      this.page.pageNum = 1
      this.getList()
    },
    getList() {
      this.listLoading = true
      findAllDt({
        pageNum: this.page.pageNum,
        pageSize: this.page.pageSize,
        ...this.queryForm
      }).then((res) => {
        this.listLoading = false
        const data = res.data.data
        this.tableList = (data.list || []).map((item) => {
          if (item.status === 1) {
            item.statusValue = true
          } else {
            item.statusValue = false
          }
          return item
        })
        this.total = data.total || 0
      }).catch((err) => {
        this.listLoading = false
        this.$message({
          type: 'error',
          message: err.message || '服务端错误，请稍后尝试'
        })
      })
    },
    sortChange() {},
    updateAddForm(row) {
      this.dialogFormVisible = true
      this.currentRow = row
      const { dictName, dictType, status, remark } = row
      // 赋值新增表格
      this.addForm.dictName = dictName
      this.addForm.dictType = dictType
      this.addForm.status = status
      this.addForm.remark = remark
    },
    delAddForm(row) {
      this.$confirm('此操作将永久删除该类型数据, 是否继续?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        this.deleteDt(row.dictId)
      }).catch(() => {})
    },
    deleteDt(dictId) {
      deleteDt({
        dictId
      }).then((res) => {
        this.$message({
          type: 'success',
          message: res.data.message || '删除成功'
        })
        this.submit()
      }).catch((err) => {
        this.$message({
          type: 'error',
          message: err.message || '删除失败'
        })
      })
    },
    toDataMgt(row) {
      this.$router.push({
        name: 'DataDictionaryDataMgt',
        query: {
          dictId: row.dictId
        }
      })
    },
    // 改变状态
    changeStatus(row) {
      updateDt({
        dictId: row.dictId,
        dictName: row.dictName,
        status: row.statusValue ? 1 : 2,
        dictType: row.dictType,
        remark: row.remark
      }).then((res) => {
        // 刷新列表
        setTimeout(() => {
          this.getList()
        }, 500)
        this.$message({
          type: 'success',
          message: res.message || '状态更新成功'
        })
      }).catch((err) => {
        this.$message({
          type: 'error',
          message: err.message || '更新错误'
        })
      })
      console.log(row)
    }
  }
}
</script>

