package com.rz.iot.bpo.controller;

import com.rz.iot.bpo.framework.aspectj.lang.annotation.Log;
import com.rz.iot.bpo.framework.aspectj.lang.enums.BusinessType;
import com.rz.iot.bpo.framework.web.controller.BaseController;
import com.rz.iot.bpo.framework.web.entity.Result;
import com.rz.iot.bpo.model.SysUser;
import com.rz.iot.bpo.model.param.SysUserParam;
import com.rz.iot.bpo.model.show.SysUserShow;
import com.rz.iot.bpo.service.SysUserService;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import java.util.List;

/**
 * 描述 : 用户管理Controller
 * 作者 : Rycony
 * 创建时间 : 2020/6/21 17:14
 * <p>
 * 修改原因 :
 * 修改人 :
 * 修改时间 ：
 */
@RestController
@RequestMapping("/sysUser")
public class SysUserController extends BaseController {
    @Resource
    private SysUserService sysUserService;

    /**
     * 查询所有用户-分页
     * @param sysUserParam 查询用户参数
     * @return
     */
    @RequestMapping("/findAll")
    @PreAuthorize("@ss.hasPermi('sysUser:findAll')")
    public Result findAll(SysUserParam sysUserParam){
        startPage();
        List<SysUserShow> list =sysUserService.findAll(sysUserParam);
        return getDataTable(list);
    }

    /**
     * 新增用户
     * @param sysUserParam 用户接收参数
     * @return
     */
    @RequestMapping("/insert")
    @Log(title = "新增用户",businessType = BusinessType.INSERT)
    @PreAuthorize("@ss.hasPermi('sysUser:insert')")
    public Result insert(SysUserParam sysUserParam){
        return sysUserService.insert(sysUserParam);
    }

    /**
     * 查询用户详情
     * @param sysUserParam
     * @return
     */
    @RequestMapping("/detail")
    @PreAuthorize("@ss.hasPermi('sysUser:detail')")
    public Result detail(SysUserParam sysUserParam){
        return sysUserService.detail(sysUserParam);
    }


    /**
     * 更新用户
     * @param sysUserParam 用户参数
     * @return
     */
    @RequestMapping("/update")
    @Log(title = "更新用户",businessType = BusinessType.UPDATE)
    @PreAuthorize("@ss.hasPermi('sysUser:update')")
    public Result update(SysUserParam sysUserParam){
        return sysUserService.update(sysUserParam);
    }

    /**
     * 删除用户
     * @param sysUserParam 用户参数
     * @return
     */
    @RequestMapping("/delete")
    @Log(title = "删除用户",businessType = BusinessType.DELETE)
    @PreAuthorize("@ss.hasPermi('sysUser:delete')")
    public Result delete(SysUserParam sysUserParam){
        return sysUserService.delete(sysUserParam);
    }

    /**
     * 重置密码
     */
    @RequestMapping("/resetPwd")
    @Log(title = "系统重置密码",businessType = BusinessType.UPDATE)
    @PreAuthorize("@ss.hasPermi('sysUser:resetPwd')")
    public Result resetPwd(SysUserParam sysUserParam){
        return sysUserService.resetPwd(sysUserParam);
    }

    /**
     * 上传文件
     * @param file 文件
     *
     * @return
     */
    @RequestMapping("/uploadPic")
    @PreAuthorize("@ss.hasPermi('sysUser:uploadPic')")
    public Result uploadPic(MultipartFile file){
        return sysUserService.uploadPic(file);
    }

    /**
     * 删除文件
     */
    @RequestMapping("/deletePic")
    public Result deleteFile(String url){
        return sysUserService.deleteFile(url);
    }
}
