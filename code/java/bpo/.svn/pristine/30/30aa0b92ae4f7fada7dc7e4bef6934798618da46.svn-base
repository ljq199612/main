package com.rz.iot.bpo.mina.service.impl;

import com.rz.iot.bpo.common.constant.DictDataConstants;
import com.rz.iot.bpo.mapper.BpoAttendanceAuditRecordMapper;
import com.rz.iot.bpo.mapper.BpoAttendanceInfoMapper;
import com.rz.iot.bpo.mina.model.show.MinaAttendanceDetailShow;
import com.rz.iot.bpo.mina.model.show.MinaAttendanceInfoShow;
import com.rz.iot.bpo.mina.service.MinaAttendanceInfoService;
import com.rz.iot.bpo.model.BpoAttendanceAuditRecord;
import com.rz.iot.bpo.model.param.BpoAttendanceInfoParam;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.List;
import java.util.Map;

@Service
public class MinaAttendanceInfoServiceImpl implements MinaAttendanceInfoService {

    @Resource
    private BpoAttendanceInfoMapper infoMapper;

    @Resource
    private BpoAttendanceAuditRecordMapper auditRecordMapper;

    @Override
    public List<MinaAttendanceInfoShow> findAll(Map<String, Object> params) {
        List<MinaAttendanceInfoShow> list = infoMapper.mpGetAll(params);
        return list;
    }

    @Override
    public MinaAttendanceDetailShow getDetail(Integer id) {
        MinaAttendanceDetailShow detailShow = infoMapper.mpGetDetail(id);
        if (detailShow == null || detailShow.getRecordApprovalStatus().equals(DictDataConstants.PENDING_REVIEW)) {
            return null;
        }
        List<BpoAttendanceAuditRecord> auditRecordList = auditRecordMapper.mpAuditDetail(id);
        detailShow.setAuditRecordList(auditRecordList);
        return detailShow;
    }

    @Override
    @Transactional(rollbackFor = {RuntimeException.class, Error.class})
    public void confirm(BpoAttendanceInfoParam attendanceInfoParam) {

    }
}
